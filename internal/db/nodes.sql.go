// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: nodes.sql

package db

import (
	"context"
)

const claimNode = `-- name: ClaimNode :exec
UPDATE nodes
SET claimed_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) ClaimNode(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, claimNode, id)
	return err
}

const getAllNodes = `-- name: GetAllNodes :many
SELECT id, fingerprint, claimed_at, last_heartbeat_at
FROM nodes
ORDER BY id
`

func (q *Queries) GetAllNodes(ctx context.Context) ([]Node, error) {
	rows, err := q.db.QueryContext(ctx, getAllNodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Node
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.Fingerprint,
			&i.ClaimedAt,
			&i.LastHeartbeatAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNodeByID = `-- name: GetNodeByID :one
SELECT id, fingerprint, claimed_at, last_heartbeat_at
FROM nodes
WHERE id = ?
`

func (q *Queries) GetNodeByID(ctx context.Context, id int64) (Node, error) {
	row := q.db.QueryRowContext(ctx, getNodeByID, id)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Fingerprint,
		&i.ClaimedAt,
		&i.LastHeartbeatAt,
	)
	return i, err
}

const insertNode = `-- name: InsertNode :exec
INSERT INTO nodes (fingerprint, claimed_at, last_heartbeat_at)
VALUES (?, NULL, NULL)
`

func (q *Queries) InsertNode(ctx context.Context, fingerprint string) error {
	_, err := q.db.ExecContext(ctx, insertNode, fingerprint)
	return err
}

const updateNodeHeartbeat = `-- name: UpdateNodeHeartbeat :exec
UPDATE nodes
SET last_heartbeat_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) UpdateNodeHeartbeat(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateNodeHeartbeat, id)
	return err
}
